@page "/"
@using Core.DataAccess
@using Core.Models
@using Microsoft.AspNetCore.Components.Authorization
@using GUI.Components
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRestApiService Rest;
@inject IDataAccess Refit;
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudGrid Justify="Justify.Center" Class="d-flex flex-row">
            <MudItem xs="12">
                <div Class="pa-4 d-flex justify-center">
                    <MudDataGrid Style="width: 1000px; height: 800px" T="UserDto" MultiSelection="true" Items="@FilteredUsers" SortMode="SortMode.Multiple" Filterable="true"
                                 Hideable="true">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Users</MudText>
                            <MudSpacer/>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.Id" Sortable="false" Filterable="false"/>
                            <PropertyColumn Property="x => x.Gender"/>
                            <PropertyColumn Property="x => x.Username"/>
                            <PropertyColumn Property="x => x.DateOfBirth"/>
                            <PropertyColumn Property="x => x.Created"/>
                            <PropertyColumn Property="x => x.LastActive"/>
                            <PropertyColumn Property="x => x.Description"/>
                            <PropertyColumn Property="x => x.Skills"/>
                            <PropertyColumn Property="x => x.Interests"/>
                            <PropertyColumn Property="x => x.City"/>
                            <PropertyColumn Property="x => x.Country"/>
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="UserDto"/>
                        </PagerContent>
                    </MudDataGrid>
                </div>
            </MudItem>
            <MudItem>
                <MudStack>
                    <div class="d-flex justify-center align-center gap-4" Elevation="0">
                        @if (isSearchPatternCorrect)
                        {
                            <MudTextField Style="width: 200px" @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        }
                        else
                        {
                            <MudTextField Style="width: 200px" @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                          IconSize="Size.Medium" Class="mt-0" Error="true" Label="Minimal 3 characters"></MudTextField>
                        }
                        <MudButton OnClick="@FilterFunc" Variant="Variant.Filled">Get Filtered Users</MudButton>
                    </div>
                    <MudButton OnClick="@GetAllUsers" Variant="Variant.Filled">Get All Users</MudButton>
                    <MudButton OnClick="@ClearAllUsers" Variant="Variant.Filled" Color="Color.Error">Clear all</MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        You cannot see this content
    </NotAuthorized>
</AuthorizeView>
@code
{
    private string ErrorMessage;
    private List<UserDto> Users = new();
    private List<UserDto> FilteredUsers = new();
    private string SearchString;
    private bool ErrorOccured { get; set; }
    private bool isSearchPatternCorrect = true;
   
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!state.User.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/login");
        }
    }
    
    private void OpenErrorDialog()
    {
        var parameters = new DialogParameters<ErrorDialog>();
        parameters.Add(x => x.ErrorMessage, $"{ErrorMessage}. Try again");
        DialogService.Show<ErrorDialog>("Error",parameters, new DialogOptions() {});
    }
    

    private void ClearAllUsers()
    {
        Users.Clear();
    }
    
    private async Task FilterFunc()
    {
        if (string.IsNullOrWhiteSpace(SearchString))
        {
            isSearchPatternCorrect = false;
            return;
        }

        if (SearchString.Length <= 2)
        {
            isSearchPatternCorrect = false;
            return;
        }
        
        isSearchPatternCorrect = true;

        await GetAllUsers();
        FilteredUsers = Users.Where(user => user.Username.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
                                    user.City.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
                                    user.Country.Contains(SearchString,StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task GetAllUsers()
    {
        try
        {
            var usersResult = await Rest.ExecudeCommand(() => Refit.GetAllUsers());

            if (usersResult.IsFailed)
            {
                ErrorOccured = true;
                ErrorMessage = usersResult.Reasons.Select(x => x.Message).First();
            }

            Users = usersResult.Value.ToList();
            FilteredUsers = Users;
            StateHasChanged();
        }
        catch (Exception e)
        {
            ErrorOccured = true;
        }
    }
}
